'''
Created on 2017. 8. 23.
@author: callor
'''
from symbol import factor

'''
모듈 : 비슷한 기능들을 한 파일에 모아서 관리하는 기법
    함수, 객체

함수
   1. 모듈작성자 : 기능을 수행하는 곳
   2. 사용자 : 기능을 호출하는 곳

명령 : keyword, reserved word(예약어)
    if sss : # if keyword command,
    
    변수, 함수명, 모듈명 등으로 사용해서는 안되는 

함수 : keyword()
    System에서 기본으로 제공하는 함수
    3rd party에서 제공하는 함수
    사용자(개발자)임의로 필요에따라 작성하는 함수

System Define Function
    파이썬에서 외부 3rd party LIB 도움 없이
    사용할수 있는 함수
    print()

User Define Function
    사용자 정의 함수

3rd party
    UDF 함수들의 모음집, 유료 무료
'''

'''
함수의 일반적 구조
    1. 호출자가 임의 값(변수, 상수(literal)) 보내고
        가. 호출자 입장 : 속성, parameter, 매개변수
        나. 함수 입장 : argument, 매개변수

    2. 함수내부에서 처리(연산)
    3. 결과를 호출한 곳에 다시 되돌리는
        가. 호출자 입장 : 되돌리는 값을 변수에 담거나,
            다른 함수나 키워드의 할당 전달자로
        나. 함수 입장 : returm 값(변수, 상수)
'''

'''
자료형의 규칙이 엄격한 언어들(Java, c)
    매개변수의 자료형에 따라 호출하는 방법이 많이 다르다
    return 하는 자료형에 따라 받는쪽에서 처리하는 방법이 많이 다름
'''

# 파이썬 함수 구조
def 함수명(받는파라메터) :

    # 처리하는 부분들
    return 0


# 1. 함수를 정의
# 덧셈 : 함수 이름
# 숫자1, 숫자2 : 매개변수
def 덧셈( 숫자1, 숫자2 ):
    
    합계 = 숫자1 + 숫자2 # 합계계산
    return 합계 # 합계에 담긴 값을 호출한 곳에 되돌려준다.


# 2. 함수를 호출
# 상수로 파라메터로 직접 넘겨주는 방법
덧셈(3,4) # 단순 호출, 결과에 연연하지 않겠다.
합계 = 덧셈(3,4) # 결과를 받는 호출, 나는 결과가 필요하다
print(합계)

# 변수에 값을 할당한 후 파라메터로 넘겨주는 방법
#     Call by Value : 변수에 담긴 값만 넘기는 형태
#     Call by Reference : (내부적으로 사용되는 메모리주소)를 넘기는 형태



#  Pass By Assingment
#    파라메터로 넘기전에 임의 저장소에 자리를 예약하고 
#    복사한 후에 값을 전달한다.

'''
비빔밥
    재료 구입해서 냉장고에 보관
    1. 친구 저한테 비빔밥 재료 달라고 
        가. 친구한테 다른 비닐봉지 담아서 친구에게 직접 재료를 전달
        나. 친구한테 우리집 현관문 비번을 알려주고
            우리집 냉장고에서 꺼내가라 
'''
숫자1 = 100 # 일반변수는 모두 Call by value
숫자2 = 200
합계 = 덧셈(숫자1, 숫자2)
print(합계)

def f(숫자1, 리스트1):
    숫자1 += 10 # 숫자1의 값에 10을 더한
    리스트1.append("A")

숫자2 = 100
리스트2 = ["K",0,"R",2]

print("함수전:",숫자2) # 100
print("함수전:",리스트2) # ["K",0,"R",2]

# 함수를 실행하고
f(숫자2, 리스트2)

print("함수후:",숫자2) # ?? 100
print("함수후:",리스트2) # ?? ["K",0,"R",2]

# 매개변수중에 '기본값 매개변수'
# Default parameter
def 계산기(숫자1, 숫자2 = 1, factor = 1):
    return 숫자1 * 숫자2 * factor

# 실제 매개변수는 3개가 필요한데, 2개만 넘기면
# factor 값은 default인 1로 세팅된다.                     
결과 = 계산기(10,20) 
                     
print(결과)

결과 = 계산기(10,20,3)
print(결과)

결과 = 계산기(10) # 오류
print(결과)


def 이름호출(이름, 나이, 주소):
    print(이름, 나이, 주소)
    

이름호출("홍길동",20,"광주시")





